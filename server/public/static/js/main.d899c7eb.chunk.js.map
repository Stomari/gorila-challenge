{"version":3,"sources":["components/Header/Header.js","components/InvestmentForm/InvestmentForm.js","components/UserInvestments/InvestmentsTable.js","components/UserInvestments/UserInvestments.js","components/PieChart/PieChart.js","App.js","serviceWorker.js","index.js"],"names":["Header","href","className","src","alt","InvestmentForm","fetchInvestments","useState","type","setType","value","setValue","date","setDate","errorMessage","setErrorMessage","onSubmit","event","preventDefault","axios","post","process","then","catch","error","console","log","submitHandler","htmlFor","name","onChange","target","min","max","InvestmentsTable","investmentInfo","deleteInvestment","map","element","key","_id","onClick","UserInvestments","fixedIncome","variableIncome","showFixed","setShowFixed","showVariable","setShowVariable","PieChart","fixedPercentage","parseFloat","length","toFixed","variablePercentage","data","title","color","App","setFixedIncome","setVariableIncome","get","response","filter","e","useEffect","investimentID","delete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d899c7eb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return(\n    <header>\n      <a href=\"https://gorilainvest.com.br\"><img className=\"logo\" src=\"./images/Icon_Gorila_hiRes.png\" alt=\"Gorila Invest Icon\" /></a>\n    </header>\n  )\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst InvestmentForm = ({ fetchInvestments }) => {\n  const [type, setType] = useState('');\n  const [value, setValue] = useState('');\n  const [date, setDate] = useState('');\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    axios.post(`${process.env.REACT_APP_API_URL}/api/investments`, { type, value, date })\n      .then(() => {\n        setType('');\n        setValue('');\n        setDate('');\n        setErrorMessage(false);\n        fetchInvestments();\n      })\n      .catch((error) => {\n        setErrorMessage(true)\n        console.log(error);\n      })\n  }\n\n  return (\n    <section className=\"investment-form\">\n      <form onSubmit={(event) => submitHandler(event)}>\n        <div className=\"form-title\">\n          <h4>Adicionar novo investimento:</h4>\n        </div>\n        <div className=\"form-inputs\">\n          <div className=\"inputs\">\n            <label htmlFor=\"type\"><strong>Tipo:</strong> </label>\n            <select name=\"type\" value={type} onChange={(event) => setType(event.target.value)}>\n              <option value=\"\">Tipo de renda</option>\n              <option value=\"fixa\">Renda Fixa</option>\n              <option value=\"variavel\">Renda Variável</option>\n            </select>\n          </div>\n          <div className=\"inputs\">\n            <label htmlFor=\"value\"><strong>Valor:</strong> </label>\n            <input name=\"value\" type=\"number\" value={value} onChange={(event) => setValue(event.target.value)} />\n          </div>\n          <div className=\"inputs\">\n            <label htmlFor=\"date\"><strong>Data da Compra:</strong> </label>\n            <input name=\"date\" type=\"date\" min=\"1700-01-01\" max=\"3000-01-01\" value={date} onChange={(event) => setDate(event.target.value)} />\n          </div>\n          <button type=\"submit\">Adicionar</button>\n        </div>\n        {\n          errorMessage && <span className=\"error\">Todos os campos devem ser preenchidos!</span>\n        }\n      </form>\n    </section>\n  )\n}\n\nexport default InvestmentForm;","import React from 'react';\n\nconst InvestmentsTable = ({ investmentInfo, deleteInvestment }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Data da compra</th>\n          <th>Valor</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          investmentInfo && investmentInfo.map((element) => {\n            return (\n              <tr key={element._id}>\n                <td>{element.date}</td>\n                <td>{element.value}</td>\n                <td><img className=\"delete\" onClick={() => deleteInvestment(element._id)} src=\"./images/trash.png\" alt=\"Trash Icon\" /></td>\n              </tr>\n            )\n          })\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default InvestmentsTable;","import React, { useState } from 'react';\nimport InvestmentTable from './InvestmentsTable';\n\nconst UserInvestments = ({ fixedIncome, variableIncome, deleteInvestment }) => {\n  const [showFixed, setShowFixed] = useState(false);\n  const [showVariable, setShowVariable] = useState(false);\n\n  return (\n    <section className=\"investments\">\n      <div className=\"invest-table\">\n        <div className=\"table-toggle fixed-title\" onClick={() => setShowFixed(!showFixed)}>\n          <h2>Renda Fixa:</h2>\n          {\n            showFixed ?\n              <p>Clique para esconder!</p>\n              :\n              <p>Clique para mostrar!</p>\n          }\n        </div>\n        {\n          showFixed &&\n          <InvestmentTable investmentInfo={fixedIncome} deleteInvestment={deleteInvestment} />\n        }\n      </div>\n      <div className=\"invest-table\">\n        <div className=\"table-toggle variable-title\" onClick={() => setShowVariable(!showVariable)}>\n          <h2>Renda Variável:</h2>\n          {\n            showVariable ?\n              <p>Clique para esconder!</p>\n              :\n              <p>Clique para mostrar!</p>\n          }\n        </div>\n        {\n          showVariable &&\n          <InvestmentTable investmentInfo={variableIncome} deleteInvestment={deleteInvestment} />\n        }\n      </div>\n    </section>\n  )\n}\n\nexport default UserInvestments;","import React from 'react';\nimport ReactChart from 'react-minimal-pie-chart';\n\nconst PieChart = ({ fixedIncome, variableIncome }) => {\n  const fixedPercentage = parseFloat(((fixedIncome.length * 100) / (fixedIncome.length + variableIncome.length)).toFixed(2));\n  const variablePercentage = parseFloat(((variableIncome.length * 100) / (fixedIncome.length + variableIncome.length)).toFixed(2));\n  \n  if (fixedPercentage || variablePercentage) {\n    return (\n      <section className=\"pie-chart\">\n        <div className=\"pie-info\">\n          <div className=\"row\">\n            <div className=\"fixed-legend\"></div>\n            <h4 className=\"fixed-percentage\"><strong>{fixedPercentage}%</strong> da carteira em renda fixa</h4>\n          </div>\n          <div className=\"row\">\n            <div className=\"variable-legend\"></div>\n            <h4 className=\"variable-percentage\"><strong>{variablePercentage}%</strong> da carteira em renda variável</h4>\n          </div>\n        </div>\n        <ReactChart className=\"chart\" data={[\n          {\n            title: 'fixed income',\n            value: fixedPercentage,\n            color: '#50c2c5'\n          },\n          {\n            title: 'variable income',\n            value: variablePercentage,\n            color: '#6ade92'\n          },\n        ]}\n        />\n      </section>\n    )\n  } else {\n    return (\n      null\n    )\n  }\n}\n\nexport default PieChart;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './style/App.scss';\nimport Header from './components/Header/Header';\nimport InvestmentForm from './components/InvestmentForm/InvestmentForm';\nimport UserInvestments from './components/UserInvestments/UserInvestments';\nimport PieChart from './components/PieChart/PieChart';\n\nconst App = () => {\n  const [fixedIncome, setFixedIncome] = useState([]);\n  const [variableIncome, setVariableIncome] = useState([]);\n\n  const fetchInvestments = () => {\n    axios.get(`${process.env.REACT_APP_API_URL}/api/investments`)\n      .then((response) => {\n        setFixedIncome(response.data.filter((e) => e.type === 'fixa'))\n        setVariableIncome(response.data.filter((e) => e.type === 'variavel'))\n      })\n      .catch((error) => console.log(error));\n  }\n\n  const deleteInvestment = (investimentID) => {\n    axios.delete(`${process.env.REACT_APP_API_URL}/api/investments/${investimentID}`)\n      .then(() => fetchInvestments())\n      .catch((error) => console.log(error));\n  }\n\n  useEffect(() => {\n    fetchInvestments();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <PieChart fixedIncome={fixedIncome} variableIncome={variableIncome} />\n      <InvestmentForm fetchInvestments={fetchInvestments} />\n      <UserInvestments fixedIncome={fixedIncome} variableIncome={variableIncome} deleteInvestment={deleteInvestment} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}